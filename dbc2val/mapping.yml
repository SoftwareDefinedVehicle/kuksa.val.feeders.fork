###############################################################################
# Copyright (c) 2022 Robert Bosch GmbH
#
# All rights reserved. This configuration file is provided to you under the
# terms and conditions of the Eclipse Distribution License v1.0 which
# accompanies this distribution, and is available at
# http://www.eclipse.org/org/documents/edl-v10.php
#
# SPDX-License-Identifier: Apache-2.0 OR BSD-3-Clause

###############################################################################
# This is a mapping of some Tesla Model 3 signals to VSS.
# The CAN trace is from the vehicle CAN of a 2018 M3 with software  2021.40.6
# The mapping is not necessarily always correct/exact but should serve as a
# good example how to use DBC feeder
#
# There is a lot more to be found in the traces. Feel free to suggest PRs
#
# This maps to VSS 2.2 
# 
# Uses model 3 DBC by Josh Wardell  https://github.com/joshwardell/model3dbc
#



# Mapping Speed
DI_uiSpeed:
  minupdatedelay: 500
  vss: # taken from https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/Vehicle/Vehicle.vspec
    datatype: float
    type: sensor
    unit: km/h
    description: Vehicle speed
  databroker:
    datatype: 10 # FLOAT number taken from types_pb2.py
    changetype: 1 # CONTINUOUS number taken from types_pb2.py
  targets:
    Vehicle.OBD.Speed: {}

# Mapping Power, this is kW do some magic to get in 0-100 int range
RearPower266:
  minupdatedelay: 500
  vss: # taken from https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/OBD/OBD.vspec
    datatype: float
    type: sensor
    unit: percent
    description: PID 04 - Engine load in percent - 0 = no load, 100 = full load
  databroker:
    datatype: 10 # FLOAT number taken from types_pb2.py
    changetype: 2 # ON_CHANGE number taken from types_pb2.py
  targets:
    Vehicle.OBD.EngineLoad:
      transform:
        math: "floor(abs(x/5))"

# Mapping Gears
#"DI_GEAR_D" 0 "DI_GEAR_INVALID" 3 "DI_GEAR_N" 1 "DI_GEAR_P" 2 "DI_GEAR_R" 7 "DI_GEAR_SNA" ;
DI_gear:
  vss: # taken from https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/Powertrain/Transmission.vspec
    datatype: int8
    type: sensor
    unit: none
    description: The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse
  databroker:
    datatype: 2 # INT8 number taken from types_pb2.py
    changetype: 2 # ON_CHANGE number taken from types_pb2.py
  minupdatedelay: 1000
  targets:
    Vehicle.Powertrain.Transmission.Gear:
      transform:
        fullmapping:
          DI_GEAR_D: 1
          DI_GEAR_INVALID: 0
          DI_GEAR_P: 0
          DI_GEAR_R: -1

# Mapping Ambient Air Temperature
VCRIGHT_hvacCabinTempEst:
  vss: # taken from https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/Cabin/HVAC.vspec
    datatype: float
    type: sensor
    unit: celsius
    description: Ambient air temperature inside the vehicle.
  databroker:
    datatype: 10 # FLOAT number taken from types_pb2.py
    changetype: 2 # ON_CHANGE number taken from types_pb2.py
  minupdatedelay: 100
  targets:
    Vehicle.Cabin.AmbientAirTemperature: {}

# Mapping SOC State of Charge
UI_SOC:
  vss: # taken from https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/Powertrain/Battery.vspec
    datatype: float
    type: sensor
    unit: percent
    description: Physical state of charge of the high voltage battery. This is not necessarily the state of charge being displayed to the customer.
  databroker:
    datatype: 10 # FLOAT number taken from types_pb2.py
    changetype: 2 # ON_CHANGE number taken from types_pb2.py
  minupdatedelay: 100
  targets:
    Vehicle.Powertrain.Battery.StateOfCharge.Current: {}

# Current Torque    
DIR_torqueActual:
  vss: # https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/Powertrain/ElectricMotor.vspec
    datatype: int16
    type: sensor
    unit: Nm
    description: Current motor torque. Negative values indicate regen mode.
  databroker:
    datatype: 3 # INT16 number taken from types_pb2.py
    changetype: 2 # ON_CHANGE number taken from types_pb2.py
  minupdatedelay: 100
  targets:
    Vehicle.Powertrain.ElectricMotor.Motor.Torque: {}

# LV System Voltage
PCS_dcdcLvBusVolt:
  vss: # https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/OBD/OBD.vspec
    datatype: float
    type: sensor
    unit: V
    description: PID 42 - Control module voltage
  databroker:
    datatype: 10 # FLOAT number taken from types_pb2.py
    changetype: 2 # ON_CHANGE number taken from types_pb2.py
  minupdatedelay: 1000
  targets:
    Vehicle.OBD.ControlModuleVoltage: {}

# Charge Plug status
CP_hvChargeStatus:
  vss: # https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/Powertrain/Battery.vspec
    datatype: string
    type: attribute
    unit: V
    description: Type of charge plug (charging inlet) available on the vehicle.
  databroker:
    datatype: 0 # STRING number taken from types_pb2.py
    changetype: 2 # ON_CHANGE number taken from types_pb2.py
  minupdatedelay: 1000
  targets:
    Vehicle.Powertrain.Battery.Charging.ChargePlugStatus:
      transform:
        fullmapping:
          CP_CHARGE_CONNECTED: "false"
          CP_CHARGE_ENABLED: "true"
          CP_CHARGE_FAULTED: "false"
          CP_CHARGE_INACTIVE: "false"
          CP_CHARGE_STANDBY: "false"
          CP_EVSE_TEST_PASSED: "true"
          CP_EXT_EVSE_TEST_ACTIVE: "true"

# IGBT temperature is not "Motor" temperature, but let's use it, as that might be the more critical temp anyway
PTC_rightTempIGBT:
  vss: # https://github.com/COVESA/vehicle_signal_specification/blob/master/spec/Powertrain/ElectricMotor.vspec
    datatype: int16
    type: sensor
    unit: celsius
    description: Motor temperature.
  databroker:
    datatype: 3 # FLOAT number taken from types_pb2.py
    changetype: 2 # ON_CHANGE number taken from types_pb2.py
  minupdatedelay: 1000
  targets:
    Vehicle.Powertrain.ElectricMotor.Motor.Temperature:
      transforn: {}
